---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQlJSdFJVYmxHb21qdm5xSHlNTXdnakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURJeE16QTVNell3TWxvWApEVEkwTURJeE16QTVNell3TWxvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWl2Qy9aRWNqc0NHWFdENXBvMGNkaEYKMXJFVk1PQWp4TFNzOEJhMHZHTEUxRHVsdWVGejNkaEw1azd4cVhRNWY2WDJVWkJYWjVTR0U1SkVvME9JNEc3MQp1UEIxQTcvOWdqZ0U5N2FFNjNsR0lZa05MRlhyS0NkcEdwbFg3MVJXam03cXdCb3dNNlk0TWlaVkRKNzhndllQCkdPU1RmQm5BNW1HalhTOVFxcnhJcjE1WDJzVmlMcWgzZ1BjQnJWVWdoeVN6RGZaMVJwQTJuUXIyUE1Malc3QmYKM1ZKZXgxcGxlSVFoc2hvb3NDYWdKNlJvUVl4b051TjAybzNOdjU0WC8yNGE1LzBhNXVPVTVCUyttLzlSQ0lDawpmU2xVZmtod3RsWlV3a3ZDS0EydEp3T1ZKSjQ1S3A5QUZpckxqZDlXQiszblBQay8vVWtzUXA5bE11MVdWeVVDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGSGhXSTEwYjVHWkFEU28yQXVUSzVWRElSKzY1NHJOCkpjMzJqemkrc1laVitzMXBGRCtyV0FRM3d4MnRaYnpYQjRpQ2hIZWdTdkdzbXBtYlRvM3phd2xDUFJIZUg3WEoKL2cyUVJGZzg2KzFNOFFRZXcxenNaMTFkdlVRSldTd003K3Mrd0hjam5UNVVJWXNBVFY0cUt5RHl5YURiY29uaAo0L3IzNXgybjJCcUh4eTExcXlEMnMzc09lU0VEb3BoY3I4TCthQnZOTzEzLytidVFrU0lOM3d0dkwyQVNYazlaCjQvUmRLcnZMM1lzVDdTNThFWWEraG51TjBwUDRmREc0c1hSdmlqeTNNbjRyeXFteGJLLzNIQnZnQ1Z1dUlGVk8KbjIvY0pXMVByUnJDbS9VRWNwTjUzeDFlbXVxSWhKNEhRcGtXYmJMd2JvUmsveHM5ZTVJNDMvVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeUs4TDlrUnlPd0laZFlQbW1qUngyRVhXc1JVdzRDUEV0S3p3RnJTOFlzVFVPNlc1CjRYUGQyRXZtVHZHcGREbC9wZlpSa0ZkbmxJWVRra1NqUTRqZ2J2VzQ4SFVEdi8yQ09BVDN0b1RyZVVZaGlRMHMKVmVzb0oya2FtVmZ2VkZhT2J1ckFHakF6cGpneUpsVU1udnlDOWc4WTVKTjhHY0RtWWFOZEwxQ3F2RWl2WGxmYQp4V0l1cUhlQTl3R3RWU0NISkxNTjluVkdrRGFkQ3ZZOHd1TmJzRi9kVWw3SFdtVjRoQ0d5R2lpd0pxQW5wR2hCCmpHZzI0M1RhamMyL25oZi9iaHJuL1JybTQ1VGtGTDZiLzFFSWdLUjlLVlIrU0hDMlZsVENTOElvRGEwbkE1VWsKbmprcW4wQVdLc3VOMzFZSDdlYzgrVC85U1N4Q24yVXk3VlpYSlFJREFRQUJBb0lCQVFDK2lHTmxCd3NsTnhNUQozWkE5YS9tQ2lwd1JPTHRVc3VENVlRLzVudE1WT3liOUVwVnVsZUZVa0lzeS9JSVVGTnM2cUtnNzBLQkpCUnJqCnprTHJ4YksvNXBBVnpDTXBUdmtwVXA0VkxoR2E3SmkrVkVGNXVYQkFLcXZVVndhbEhpRFE4aFE5U1BKZ3FBNEYKRXM2T3k5TlM1bmFOM2ZEL1NvUHd3M2VmaW9qdmhLeHhZWkRmM1RrN0w2UWRvRXNXYmtMUFRsc2o4S0ZXWTV1ZwptNzQ3YjJvWHhxcyttYllicXFYbVc5eHdCU3g5bzRsVVMra3hwVW5RMUYzZmNaSkcrZ2duTXZpV1dSR09uOUwwCm10MEdZMEMzRnAvTGl3N1ZUMnlxaXU3cXhaeUVQSkpleDYrcTdvTXpzdE5UdG1PKzBDL0E5d1NwR0VZK0RPdlgKNm4rN21DZUJBb0dCQU9jTG04ZmdWUk4zVDZxVW1LRFJ6bnRaTnk3elp1RE5KMHBMRmpqQm0yMExhSFBNOE9TbAp1UUppREh3bFpFbFhKcXM1RmlpVXRXNzRCcjJQVzZ0VGdzdlJJNmR6b3duZkJyZ01uaGlFc0NmWkFDV00ySXNsCi95d2lkL0c0Q25WRFVVUHJjNUM3VVJ1YXQ0aFdteURXUVNxandsL2QxVHdLVDl5TlFZUnh2SlNWQW9HQkFONWIKOFVNdXVMRldiWFptbXZHMW5jc2d5UFJ3SUpYdnErT0Z5cjNDeFE3cGZia3pwa1BZMFoySko4RTNxdFZQR1p4UQpZQW56dzFzRm1La1VFcHFjM2hnWmtTQzRSQVBzZzVFcTcwcW54eEgzcXZadVNRbXdDREJ0dm9MVGdPWWF5ZjNTCnkvY3BjUGxMRi9NYXNXYzZ0M25HdzFMS3hkcy9JTEExQk4zdHRRUlJBb0dBVG5OOW9OL0dZNGEyc1ZnbGZ5M2UKYTdtK2FCM1R4KzlCTVJQUDV0T3VuOWNvejNFK05wVWkvZkVuQmh4NE1nTDZxVmNIOUIyU2dheU1OVjl4SS9xRwpSZ2lzajVaUFBQSFN5VG5Ya01HMVFzS0hMemprNmxLcmsyUGMwR0hLZzBpcFZtT2phUGlCc05yWENOOUhhMTMwCjRMS2NOSXNSZFlLVzNXL0ZXR0I2UlFVQ2dZQkVvTFhtMlUyeGxnNDB3OWhBajZCQzZEeDlqUG5Sck9ZdFU4Yk8KS0lYdlkwc2xWUGFVN0I5Tjh0M3RPWVFsVDhPRXhoM09GSWtQMTd0Vk85ZStGbnBKaitLRjZiazhTTXdXaXR6TgordGhyQ0RpZzFFc0FqVzhKbTJWNE5WVU1MK3AxeDVDaUdRMUFNOWdSZFFTWjZycGtBRithZHZENENSVEtyYUp4CjZJSzg4UUtCZ0huclA3eTBoK2labVNPaERwYVNuU2ZoOFlBSGh1cE93Yjc1ZWlBcmNUTXgwU3dhb1l5N3dYenoKSkRoTUV5NGthZ29KSXdod281ZEpqeTFTN0dTaGQ4NTFJbTNlV1dvUEora3p1ODk0NDg4Nk5jWkhFMm1uNFoxRApuT05pRFV4RjZhc21EQXpoMVQ5OWRGU0pjaFJ0RGRXMVJMVytyUmZPNkM1MlI2TXFQVzNqCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQlJSdFJVYmxHb21qdm5xSHlNTXdnakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURJeE16QTVNell3TWxvWApEVEkwTURJeE16QTVNell3TWxvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWl2Qy9aRWNqc0NHWFdENXBvMGNkaEYKMXJFVk1PQWp4TFNzOEJhMHZHTEUxRHVsdWVGejNkaEw1azd4cVhRNWY2WDJVWkJYWjVTR0U1SkVvME9JNEc3MQp1UEIxQTcvOWdqZ0U5N2FFNjNsR0lZa05MRlhyS0NkcEdwbFg3MVJXam03cXdCb3dNNlk0TWlaVkRKNzhndllQCkdPU1RmQm5BNW1HalhTOVFxcnhJcjE1WDJzVmlMcWgzZ1BjQnJWVWdoeVN6RGZaMVJwQTJuUXIyUE1Malc3QmYKM1ZKZXgxcGxlSVFoc2hvb3NDYWdKNlJvUVl4b051TjAybzNOdjU0WC8yNGE1LzBhNXVPVTVCUyttLzlSQ0lDawpmU2xVZmtod3RsWlV3a3ZDS0EydEp3T1ZKSjQ1S3A5QUZpckxqZDlXQiszblBQay8vVWtzUXA5bE11MVdWeVVDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGSGhXSTEwYjVHWkFEU28yQXVUSzVWRElSKzY1NHJOCkpjMzJqemkrc1laVitzMXBGRCtyV0FRM3d4MnRaYnpYQjRpQ2hIZWdTdkdzbXBtYlRvM3phd2xDUFJIZUg3WEoKL2cyUVJGZzg2KzFNOFFRZXcxenNaMTFkdlVRSldTd003K3Mrd0hjam5UNVVJWXNBVFY0cUt5RHl5YURiY29uaAo0L3IzNXgybjJCcUh4eTExcXlEMnMzc09lU0VEb3BoY3I4TCthQnZOTzEzLytidVFrU0lOM3d0dkwyQVNYazlaCjQvUmRLcnZMM1lzVDdTNThFWWEraG51TjBwUDRmREc0c1hSdmlqeTNNbjRyeXFteGJLLzNIQnZnQ1Z1dUlGVk8KbjIvY0pXMVByUnJDbS9VRWNwTjUzeDFlbXVxSWhKNEhRcGtXYmJMd2JvUmsveHM5ZTVJNDMvVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: proxy-admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.4
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.12.4
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux

      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.12.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.4
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.30.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.4
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: a17e9355ab7f8921929bb5d12d97962ca24632841ab8531d3390a7fb50c8b13f
        linkerd.io/created-by: linkerd/helm stable-2.12.4
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux

      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRYk9FcC96Sk9vaTBuV2VnTGx2eE8wekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURJeApNekE1TXpZd00xb1hEVEkwTURJeE16QTVNell3TTFvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUx1aFZVc2hFdGxuVW9xRnUwS1VpQVo1di9nbER5Y0NlSnpmNGtCVHdjbWR1ZHNKMy9jNFB2UUNZM210ZnFMdQpoMGs2YlB2QzZjbkxWTy9nMXBPbW9yem15ekZwVXorSW9pNU42RHN6N2pqWmhXRXJvSnorcWlmRUZROWtGL0tvCjVDYlFVNXVRck5Bbm9wa0xvV2s2R2VXR2RLckE5eS9CZEpsbVhTbmtHL0JJeTBRYVRJWTQ4Z3FTUk5ZeEI5am4KUnN6RHB2Mkpxdk1hcTJEQmpUZnR6Syt0NDF5YndSMHplL2FvcXNuOW5rN21PUHJ2MEQrUG1hQmM2b1NDZlRWKwplM3hPOVhlRmRBek51MVpoRm90OWlyaFpmK3BQTllHSm1BUDRpeGFCd3JpZ2NvM0hLaEZWNnpLSmt2Ry9wNmxICjU3Y0dvTkJSeExHQWY2cFBGbU01eEZFQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBS21mNkkxOUtNdzhNanZmUzVKQ0RZaUhqT2FhQTk3Mm5UOEZGOUVOR2ExbDNVV1BVNUh6RmVvbnF6VmQKRnBRUTRPcHJGMEpzcU5jK2dOZGsxblJkb0NyTVByMzFrZEg1U2hJNUY5RTlUdkJlMkZZTDZmZGc4OUQ0NDExRwpCRnVVczNYRU1xRFJ3RGZaemxwTDVPSUVyNmNPL2tpSVRtN0lmY2UybHNQTmNkbHFPRmg2SlA3by92K0xUai95CjlZdHFaMFVSRlI5ZEQ2RHN5OTlLdUlBOWdvQ0s2UFZXQUJDSUdhQk5PZGVhdWFNeW9qZGFoQUxxSHg3VW9VeDkKL3p3WERqV3lxaUV4V1JaakRsdGJnTGRTWWdSQmFOZzRXTU4vYWMyd2NpQ3VpTHZFZUI1ejVTcU1nWlZRVlpJdQpHUGY3K1Yvc0pydk9rZFhaMHJieHdYRVVWWkk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdTZGVlN5RVMyV2RTaW9XN1FwU0lCbm0vK0NVUEp3SjRuTi9pUUZQQnlaMjUyd25mCjl6Zys5QUpqZWExK291NkhTVHBzKzhMcHljdFU3K0RXazZhaXZPYkxNV2xUUDRpaUxrM29PelB1T05tRllTdWcKblA2cUo4UVZEMlFYOHFqa0p0QlRtNUNzMENlaW1RdWhhVG9aNVlaMHFzRDNMOEYwbVdaZEtlUWI4RWpMUkJwTQpoamp5Q3BKRTFqRUgyT2RHek1PbS9ZbXE4eHFyWU1HTk4rM01yNjNqWEp2QkhUTjc5cWlxeWYyZVR1WTQrdS9RClA0K1pvRnpxaElKOU5YNTdmRTcxZDRWMERNMjdWbUVXaTMyS3VGbC82azgxZ1ltWUEvaUxGb0hDdUtCeWpjY3EKRVZYck1vbVM4YitucVVmbnR3YWcwRkhFc1lCL3FrOFdZem5FVVFJREFRQUJBb0lCQVFDNTRrQ2MrTHd5MC9EcgpPVWZtMHozYnBIeXgrdzBDNmFqU1NkOWRPVjFRUDhsa0htbGJBOGNpZU1kU1FiYW05a2JqSGxYZ0toN3hnMWEzCmUzazV1Q21ibWM2T09qbDJSUWZmZGVGdjNhZlJmSFp1YVFscTM4VjFOZ1pqUkJlUm1RN0hBVGNEZEpZd2RrUFkKK2JQRWl3SWk2VXpsNmR3NTNKK0daZXBBV1RQd25JcEZUNll6RXJaZ2VFYVgrMzVZR0RQZUdmcGdLeGhNcWVXVQpOSE9acjRRT0tVUGc3L2tyTWFXU2wrSkg3TUFEdnBTNlJhU2swSFcycStKcnFsQUE0UGM2bU9JL281WVA5Z3NTCi9mZ0RyOUJiTGp6d2ZFN2RaSWd5c0Vyek5lUTN0WEh1dnBiWHdVeXM1emdNRVlkTG9hQW5tcThkRE91dWRaWEEKL28yNEVvTk5Bb0dCQU0wWGVyOGN2UGpDV0p3ZXNQeHEzNkF6Z1lka2gvb3czNVRJcGM2T2RtWVdSTEo2NWQ2cAp2b1l4VWVqeHFDZFB5S1NDbG93cFJCSitPNFRrQm5wcjdGZGxtelFiYnEyUy85VkNwY3FMMk1FeUtrZ2NXQUMrCjlpaDIweVQ2SU9haVlZOGxRODhreThBRGJtbG9CYnFnclBoNW44VDRQaFlERnU1Vmo1WjVyMVI3QW9HQkFPbzAKUTgrb1dwOStjZjJwVVRlMHhXUUNpNzlEc1VQM3F3T2MyZjl6ZE15cmpRWVZzclRJcHRDYXJ0TjZlU1h4emxKegpjVGtwMmZKb01YakdmSzYzWWVjNlczWjVhN2ZZYy9RUi9Ca21CVUQzVk1vUUxYaUFCYmJSZG0wNnoybW5hNVVYCkF2TGVxUUllTmhPZFNPQzlNcUJRYWtBeUVidFBFbjc3aE96YkZNNmpBb0dCQU1IbmN3d0JsY0R6cm1kY3RTVFIKdnNCdU1nYmFTNTJHVzcwRnY0MzlMMy94aWQzZFNEd3U3STFmVC93WGprNHNwcHl6UXJjZHhOaGZOTks5N0VvTwpnNU5WNDFsdW5rUEplY3dkaVRabzVmUXpBN3JONFg1RERlVFFBMjB3ZDY3VzA3cE5GMEZmbnF2YUVxZmh5NWpaCmxQQVB2Yml5bzdDWUZ6UWEvUGpkNzZERkFvR0FHT1RSU0dOR3JxbE1DSUJVeDYwSlJpWVhJSTliYWpRTEUyazYKcXJKaytkUktPeGxYVTJ2NGZ6ZlIyVnl0UCtGQjR2V3VWVHNqbFdhSnk2S2RZaHpQNVRvSXVzRVJPQXRqMTgrSgpra3ErU0RlQjViQnVoTjVtdlJYcWxwV25zajAvYkN0ei9zaTRBaWVmNjluT0EwVlkrajFSN2R6a2tacElCd05KCkQ3d0JyQzBDZ1lCY0w2eHlIcFhld3EyRnlYUG1EYTVRNkVNQXF0eXpXZXE5eDlMOGFqOFFwVkNobmV3dmZsSW4KR01jYjlLY3FEbG1RWGZlYU5BUTdoUEZFRTFYMTB4azRQdFFhdXJVR0VkY1RaeDN1ZW1FSE9PUTJSeTV5M1R2dQoxSFhiMjBZbnVqL05IR0lzaXVvRHpERFg4MFVreHZlUWV6ZUlLQzgxRXdLeWRGSWQ3aTNPREE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRYk9FcC96Sk9vaTBuV2VnTGx2eE8wekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURJeApNekE1TXpZd00xb1hEVEkwTURJeE16QTVNell3TTFvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUx1aFZVc2hFdGxuVW9xRnUwS1VpQVo1di9nbER5Y0NlSnpmNGtCVHdjbWR1ZHNKMy9jNFB2UUNZM210ZnFMdQpoMGs2YlB2QzZjbkxWTy9nMXBPbW9yem15ekZwVXorSW9pNU42RHN6N2pqWmhXRXJvSnorcWlmRUZROWtGL0tvCjVDYlFVNXVRck5Bbm9wa0xvV2s2R2VXR2RLckE5eS9CZEpsbVhTbmtHL0JJeTBRYVRJWTQ4Z3FTUk5ZeEI5am4KUnN6RHB2Mkpxdk1hcTJEQmpUZnR6Syt0NDF5YndSMHplL2FvcXNuOW5rN21PUHJ2MEQrUG1hQmM2b1NDZlRWKwplM3hPOVhlRmRBek51MVpoRm90OWlyaFpmK3BQTllHSm1BUDRpeGFCd3JpZ2NvM0hLaEZWNnpLSmt2Ry9wNmxICjU3Y0dvTkJSeExHQWY2cFBGbU01eEZFQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBS21mNkkxOUtNdzhNanZmUzVKQ0RZaUhqT2FhQTk3Mm5UOEZGOUVOR2ExbDNVV1BVNUh6RmVvbnF6VmQKRnBRUTRPcHJGMEpzcU5jK2dOZGsxblJkb0NyTVByMzFrZEg1U2hJNUY5RTlUdkJlMkZZTDZmZGc4OUQ0NDExRwpCRnVVczNYRU1xRFJ3RGZaemxwTDVPSUVyNmNPL2tpSVRtN0lmY2UybHNQTmNkbHFPRmg2SlA3by92K0xUai95CjlZdHFaMFVSRlI5ZEQ2RHN5OTlLdUlBOWdvQ0s2UFZXQUJDSUdhQk5PZGVhdWFNeW9qZGFoQUxxSHg3VW9VeDkKL3p3WERqV3lxaUV4V1JaakRsdGJnTGRTWWdSQmFOZzRXTU4vYWMyd2NpQ3VpTHZFZUI1ejVTcU1nWlZRVlpJdQpHUGY3K1Yvc0pydk9rZFhaMHJieHdYRVVWWkk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 188d92ed170d127a737f44a69f07b7b2ed3756d59177c472920d6948d88439dc
        linkerd.io/created-by: linkerd/helm stable-2.12.4
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux

      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.4
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.4
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        # - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.12.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
---
###
###Grafana 
###
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: linkerd-viz
data:
  podAnnotations: |-
    linkerd.io/inject: enabled
  grafana.ini: |-
    server:
      root_url: '%(protocol)s://%(domain)s:/grafana/'
    auth:
      disable_login_form: true
    auth.anonymous:
      enabled: true
      org_role: Editor
    auth.basic:
      enabled: false
    analytics:
      check_for_updates: false
    panels:
      disable_sanitize_html: true
    log:
      mode: console
    log.console:
      format: text
      level: info
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      editable: true
  dashboardproviders.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/default
  dashboards.yaml: |-
    default:
      top-line:
        gnetId: 15474
        revision: 4
        datasource: prometheus
      health:
        gnetId: 15486
        revision: 3
        datasource: prometheus
      kubernetes:
        gnetId: 15479
        revision: 2
        datasource: prometheus
      namespace:
        gnetId: 15478
        revision: 3
        datasource: prometheus
      deployment:
        gnetId: 15475
        revision: 6
        datasource: prometheus
      pod:
        gnetId: 15477
        revision: 3
        datasource: prometheus
      service:
        gnetId: 15480
        revision: 3
        datasource: prometheus
      route:
        gnetId: 15481
        revision: 3
        datasource: prometheus
      authority:
        gnetId: 15482
        revision: 3
        datasource: prometheus
      cronjob:
        gnetId: 15483
        revision: 3
        datasource: prometheus
      job:
        gnetId: 15487
        revision: 3
        datasource: prometheus
      daemonset:
        gnetId: 15484
        revision: 3
        datasource: prometheus
      replicaset:
        gnetId: 15491
        revision: 3
        datasource: prometheus
      statefulset:
        gnetId: 15493
        revision: 3
        datasource: prometheus
      replicationcontroller:
        gnetId: 15492
        revision: 4
        datasource: prometheus
      prometheus:
        gnetId: 15489
        revision: 2
        datasource: prometheus
      prometheus-benchmark:
        gnetId: 15490
        revision: 2
        datasource: prometheus
      multicluster:
        gnetId: 15488
        revision: 3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        linkerd.io/control-plane-component: viz
      annotations:
        linkerd.io/inject: enabled
    spec:
      serviceAccountName: grafana
      containers:
        - name: grafana
          image: grafana/grafana:8.2.2
          ports:
            - containerPort: 3000
          env:
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel"
          volumeMounts:
            - name: grafana-config-volume
              mountPath: /etc/grafana
      volumes:
        - name: grafana-config-volume
          configMap:
            name: grafana-config
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-grafana
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-viz
subjects:
  - kind: ServiceAccount
    name: grafana
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-grafana
rules:
  - apiGroups:
      - linkerd.io
    resources:
      - "*"
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
